# The RPC-generator generates a communication protocol between a server and a client
# Now we want 2 way communication between Alice and Bob where either one can initiate the communication.
# For that we make 2 RPC-protocols, one for Alice calling Bob's functions and one for Bob calling Alice's functions.
# There are 4 config files in total, one per direction and participant.
# So there is one config file for Alice to Bob for Alice, Bob to Alice for Alice, Alice to Bob for Bob and Bob to Alice for Bob.
# This is the config for Bob to Alice inside Bob's project, so Bob is the client and Alice is the server.
# Alice provides a header file that contains function declarations that are made available to Bob via RPC calls.
# Invoke the RPC-generator with parameters Alice to Bob for Alice and  Alice to Bob for Bob and
# 		invoke it again for Bob to Alice for Bob and Bob to Alice for Alice (always the client first, server second)
# This config file is intended to be parsed by Python's configparser, for syntax documentation refer to https://docs.python.org/3/library/configparser.html
# Relative paths are relative to the config file

[configuration]

# where to put the documentation files (.html, .css and .xml)
# comment this out to not generate documentation files
DOCDIR=./RPC/Alice_to_Bob/doc

# where to put the source file (.c) that implements the RPC logic
SRCDIR=./RPC/Alice_to_Bob/src

# where to put the generic header files for types and the network
GENINCDIR=./RPC/Alice_to_Bob/generic_include

# where to put the protocol specific header files for the server function calls
SPCINCDIR=./RPC/Alice_to_Bob/specific_include
